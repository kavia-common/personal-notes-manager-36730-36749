{"is_source_file": true, "format": "Python", "description": "This Python source file defines FastAPI route handlers for managing 'notes'. It includes CRUD operations such as creating, listing, retrieving, updating, and deleting notes, interfacing with a SQLAlchemy ORM model and schemas. The file sets up API endpoints prefixed under a router and includes functions for database interaction and error handling.", "external_files": ["api/db.py", "api/models.py", "api/schemas.py"], "external_methods": ["get_db", "Base.metadata.create_all", "db.get", "db.query", "db.add", "db.commit", "db.refresh", "db.delete"], "published": ["router"], "classes": [{"name": "Note", "description": "SQLAlchemy ORM model representing a note record in the database."}, {"name": "NoteCreate", "description": "Pydantic schema for creating a new note, includes optional title and content."}, {"name": "NoteUpdate", "description": "Pydantic schema for updating an existing note, optionally including title and/or content."}, {"name": "NoteOut", "description": "Pydantic schema for output representation of a note, includes ID, timestamps, title, and content."}], "methods": [{"name": "Note _get_note_or_404(db: Session, note_id: int)", "description": "Helper function to retrieve a Note by ID or raise 404 if not found.", "scope": "", "scopeKind": ""}, {"name": "NoteOut create_note(payload: NoteCreate, db: Session = Depends(get_db))", "description": "Endpoint to create a new note with optional title and content.", "scope": "", "scopeKind": ""}, {"name": "List[NoteOut] list_notes(db: Session = Depends(get_db))", "description": "Endpoint to retrieve all notes, ordered by creation date descending.", "scope": "", "scopeKind": ""}, {"name": "NoteOut get_note( note_id: int = Path(..., description=\"ID of the note to retrieve\", ge=1), db: Session = Depends(get_db), )", "description": "Endpoint to get a specific note by ID.", "scope": "", "scopeKind": ""}, {"name": "NoteOut update_note( payload: NoteUpdate, note_id: int = Path(..., description=\"ID of the note to update\", ge=1), db: Session = Depends(get_db), )", "description": "Endpoint to update an existing note's title and/or content.", "scope": "", "scopeKind": ""}, {"name": "None delete_note( note_id: int = Path(..., description=\"ID of the note to delete\", ge=1), db: Session = Depends(get_db), )", "description": "Endpoint to delete a specific note by ID.", "scope": "", "scopeKind": ""}], "calls": ["Base.metadata.create_all", "db.get(Note, note_id)", "db.query(Note).order_by(Note.created_at.desc()).all()", "db.add(note)", "db.commit()", "db.refresh(note)", "db.delete(note)"], "search-terms": ["FastAPI notes CRUD", "SQLAlchemy note model", "note API routes", "create_note endpoint", "list_notes endpoint", "get_note endpoint", "update_note endpoint", "delete_note endpoint"], "state": 2, "file_id": 9, "knowledge_revision": 31, "git_revision": "cb4a9d39d9a45ffb2ffb695021ff1a461e55c6ad", "revision_history": [{"20": ""}, {"30": "3e0e08ce8548a52c2d141378be710c4416c5ee2a"}, {"31": "cb4a9d39d9a45ffb2ffb695021ff1a461e55c6ad"}], "ctags": [{"_type": "tag", "name": "_get_note_or_404", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-36730-36749/notes_backend/src/api/routers/notes.py", "pattern": "/^def _get_note_or_404(db: Session, note_id: int) -> Note:$/", "language": "Python", "typeref": "typename:Note", "kind": "function", "signature": "(db: Session, note_id: int)"}, {"_type": "tag", "name": "create_note", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-36730-36749/notes_backend/src/api/routers/notes.py", "pattern": "/^def create_note(payload: NoteCreate, db: Session = Depends(get_db)) -> NoteOut:$/", "language": "Python", "typeref": "typename:NoteOut", "kind": "function", "signature": "(payload: NoteCreate, db: Session = Depends(get_db))"}, {"_type": "tag", "name": "delete_note", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-36730-36749/notes_backend/src/api/routers/notes.py", "pattern": "/^def delete_note($/", "language": "Python", "typeref": "typename:None", "kind": "function", "signature": "( note_id: int = Path(..., description=\"ID of the note to delete\", ge=1), db: Session = Depends(get_db), )"}, {"_type": "tag", "name": "get_note", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-36730-36749/notes_backend/src/api/routers/notes.py", "pattern": "/^def get_note($/", "language": "Python", "typeref": "typename:NoteOut", "kind": "function", "signature": "( note_id: int = Path(..., description=\"ID of the note to retrieve\", ge=1), db: Session = Depends(get_db), )"}, {"_type": "tag", "name": "list_notes", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-36730-36749/notes_backend/src/api/routers/notes.py", "pattern": "/^def list_notes(db: Session = Depends(get_db)) -> List[NoteOut]:$/", "language": "Python", "typeref": "typename:List[NoteOut]", "kind": "function", "signature": "(db: Session = Depends(get_db))"}, {"_type": "tag", "name": "router", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-36730-36749/notes_backend/src/api/routers/notes.py", "pattern": "/^router = APIRouter()$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "update_note", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-36730-36749/notes_backend/src/api/routers/notes.py", "pattern": "/^def update_note($/", "language": "Python", "typeref": "typename:NoteOut", "kind": "function", "signature": "( payload: NoteUpdate, note_id: int = Path(..., description=\"ID of the note to update\", ge=1), db: Session = Depends(get_db), )"}], "hash": "9a737e5ac6ec7a13487e61c3818fa751", "format-version": 4, "code-base-name": "notes_backend", "filename": "notes_backend/src/api/routers/notes.py", "fields": [{"name": "router = APIRouter()", "scope": "", "scopeKind": "", "description": "unavailable"}]}