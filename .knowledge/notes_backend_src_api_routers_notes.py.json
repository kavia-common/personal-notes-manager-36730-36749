{"is_source_file": true, "format": "Python", "description": "This file defines REST API endpoints for managing notes within a FastAPI application. It includes functions to create, list, retrieve, update, and delete notes, utilizing SQLAlchemy ORM for database interactions and Pydantic schemas for request/response validation.", "external_files": ["api/db.py", "api/models.py", "api/schemas.py"], "external_methods": ["get_db", "Base.metadata.create_all", "db.get", "db.query", "db.add", "db.commit", "db.refresh", "db.delete"], "published": ["create_note", "list_notes", "get_note", "update_note", "delete_note", "router"], "classes": [{"name": "Note", "description": "SQLAlchemy model representing a note record in the database."}], "methods": [{"name": "Note _get_note_or_404(db: Session, note_id: int)", "description": "Helper function to retrieve a note by ID or raise a 404 error if not found.", "scope": "", "scopeKind": ""}, {"name": "NoteOut create_note(payload: NoteCreate, db: Session = Depends(get_db))", "description": "Handles HTTP POST requests to create a new note.", "scope": "", "scopeKind": ""}, {"name": "List[NoteOut] list_notes(db: Session = Depends(get_db))", "description": "Handles HTTP GET requests to list all notes.", "scope": "", "scopeKind": ""}, {"name": "NoteOut get_note( note_id: int = Path(..., description=\"ID of the note to retrieve\", ge=1), db: Session = Depends(get_db), )", "description": "Handles HTTP GET requests to retrieve a specific note by ID.", "scope": "", "scopeKind": ""}, {"name": "NoteOut update_note( payload: NoteUpdate, note_id: int = Path(..., description=\"ID of the note to update\", ge=1), db: Session = Depends(get_db), )", "description": "Handles HTTP PUT requests to update an existing note.", "scope": "", "scopeKind": ""}, {"name": "None delete_note( note_id: int = Path(..., description=\"ID of the note to delete\", ge=1), db: Session = Depends(get_db), )", "description": "Handles HTTP DELETE requests to delete a note by ID.", "scope": "", "scopeKind": ""}], "calls": ["Base.metadata.create_all", "db.get", "db.query", "db.add", "db.commit", "db.refresh", "db.delete"], "search-terms": ["notes_api_router", "notes_crud_endpoints", "Note SQLAlchemy model", "FastAPI notes endpoints", "API router for notes"], "state": 2, "file_id": 9, "knowledge_revision": 30, "git_revision": "3e0e08ce8548a52c2d141378be710c4416c5ee2a", "revision_history": [{"20": ""}, {"30": "3e0e08ce8548a52c2d141378be710c4416c5ee2a"}], "ctags": [{"_type": "tag", "name": "_get_note_or_404", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-36730-36749/notes_backend/src/api/routers/notes.py", "pattern": "/^def _get_note_or_404(db: Session, note_id: int) -> Note:$/", "language": "Python", "typeref": "typename:Note", "kind": "function", "signature": "(db: Session, note_id: int)"}, {"_type": "tag", "name": "create_note", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-36730-36749/notes_backend/src/api/routers/notes.py", "pattern": "/^def create_note(payload: NoteCreate, db: Session = Depends(get_db)) -> NoteOut:$/", "language": "Python", "typeref": "typename:NoteOut", "kind": "function", "signature": "(payload: NoteCreate, db: Session = Depends(get_db))"}, {"_type": "tag", "name": "delete_note", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-36730-36749/notes_backend/src/api/routers/notes.py", "pattern": "/^def delete_note($/", "language": "Python", "typeref": "typename:None", "kind": "function", "signature": "( note_id: int = Path(..., description=\"ID of the note to delete\", ge=1), db: Session = Depends(get_db), )"}, {"_type": "tag", "name": "get_note", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-36730-36749/notes_backend/src/api/routers/notes.py", "pattern": "/^def get_note($/", "language": "Python", "typeref": "typename:NoteOut", "kind": "function", "signature": "( note_id: int = Path(..., description=\"ID of the note to retrieve\", ge=1), db: Session = Depends(get_db), )"}, {"_type": "tag", "name": "list_notes", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-36730-36749/notes_backend/src/api/routers/notes.py", "pattern": "/^def list_notes(db: Session = Depends(get_db)) -> List[NoteOut]:$/", "language": "Python", "typeref": "typename:List[NoteOut]", "kind": "function", "signature": "(db: Session = Depends(get_db))"}, {"_type": "tag", "name": "router", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-36730-36749/notes_backend/src/api/routers/notes.py", "pattern": "/^router = APIRouter()$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "update_note", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-36730-36749/notes_backend/src/api/routers/notes.py", "pattern": "/^def update_note($/", "language": "Python", "typeref": "typename:NoteOut", "kind": "function", "signature": "( payload: NoteUpdate, note_id: int = Path(..., description=\"ID of the note to update\", ge=1), db: Session = Depends(get_db), )"}], "hash": "fe33377ff1b556780d09e960ab968d14", "format-version": 4, "code-base-name": "notes_backend", "filename": "notes_backend/src/api/routers/notes.py", "fields": [{"name": "router = APIRouter()", "scope": "", "scopeKind": "", "description": "unavailable"}]}